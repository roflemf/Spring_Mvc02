<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">


	<bean id= "customAccessDenied" class="net.daum.security.CustomAccessDeniededHandler" />
	<!--CustomAccessDeniededHandler 클래스의 빈 아이디 객체명 customAccessDenied 생성-->
	
	<bean id = "customLoginSuccess" class="net.daum.security.CustomLoginSuccessHandler" />
	<!-- 로그인 성공시 호출 -->
	
	
	<!-- <bean id = "customPasswordEncoder"
		class="net.daum.security.CustomNoOpPasswordEncoder" />
		 CustomNoOpPasswordEncoder 클래스의 빈 아이디 객체명  customPasswordEncoder을 생성-->
		
		
	<bean id="bcryptPasswordEncoder"
         class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
   <!-- 
         1.스프링 시큐리티에서 제공하는 BCryptPasswordEncoder 클래스를 이용해서 비번을 암호화 처리한다.
         2.bcrypt는 태생 자체가 패스워드를 저장하는 용도로 설계된 것으로 특정 문자열을 암호화 한다.
           체크하는 쪽에서는 암호화 된 패스워드가 가능한 패스워드 인지만 확인하고 다시 원래 원문으로 되돌리지는 못한다.                   
   -->
   
   
	<security:http><!-- 스프링 시큐리티가 http 인터넷 웹 (www)에서 알 수 있게 하는 시작 시점을 설정 -->

		<security:intercept-url pattern="/sample/all"
			access="permitAll" />
		<!-- url 매핑주소에 접근할 때 인터셉터(가로채기: 필터)를 이용해 접근을 제한하는 설정은 <security:intercept-url>을 
			사용 pattern속성값으로 컨트롤러에 지정한 매핑주소가 들어감. accesss속성값; 권한 범위 체크. PermitAll; 모든 
			사용자 허용 -->


		<security:intercept-url
			pattern="/sample/member" access="hasRole('ROLE_MEMBER')" />
		<!-- ROLE_MEMBER; 로그인 한 사용자만 접근 가능 -->

		<security:intercept-url pattern="/sample/admin"
			access="hasRole('ROLE_ADMIN')" />
		<!-- ROLE_ADMIN; 로그인 한 사용자 중 관리자 권한을 가진 사용자만 접근 가능 -->
		
		<!-- <security:access-denied-handler error-page="/accessError"/>
		 403 접근 금지 에러가 발생시 accessError 매핑주소가 실행되게 해줌 -->
		
		<security:access-denied-handler ref="customAccessDenied"/>
		<!-- 403 에러가 발생시 빈아이디  customAccessDenied 호출-->
		 
		<!-- <security:form-login />  시큐리티 폼 로그인 설정 : 스프링 시큐리티에서 제공하는 내장 폼 로그인 실행 -->
		
		<security:form-login login-page="/customLogin"
		authentication-success-handler-ref="customLoginSuccess" />
		<!-- 사용자 정의(커스텀) 로그인 페이지로 이동하는 매핑 주소 /customLogin 등록,
			authentication-success-handler-ref 속성은 로그인 성공시 빈아이디 customLoginSuccess 호출-->
		
		<!--로그아웃 -->
		<security:logout logout-url="/customLogout" invalidate-session="true"/>
		<!-- 로그아웃시 customLogout매핑주소 실행
			 invalidate-session="true" 는 로그아웃시 세션 무효화(로그아웃 처리)-->
			 
	</security:http>

	<security:authentication-manager><!-- 스프링 시큐리티 인증 관리자 ; 시큐리티 동작 위해 설정 -->
		<security:authentication-provider><!-- 스프링 시큐리티 인증 제공자 -->
			<security:user-service>

				<security:user name="member" password="{noop}member"
					authorities="ROLE_MEMBER" />
				<!-- 아이디가 member, 비번이 member인 사용자는 로그인 인증 처리를 한다. 
				{noop}는 비번을 인코딩(암호화)처리 없이 사용한다. -->

				<security:user name="admin" password="{noop}admin"
					authorities="ROLE_MEMBER,ROLE_ADMIN" />
				<!-- 아이디가 admin,비번이 admin인 사용자는 
				/sample/member 과 /sample/admin에 모두 접근	가능 -->

			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	
	<security:authentication-manager> <!-- 또 다른 인증 관리자 -->
		<security:authentication-provider> <!-- 인증 제공자 -->
			<!--  <security:jdbc-user-service data-source-ref="dataSource"/> -->
			<!-- root-context.xml에 설정된 빈 아이디 dataSource 를 호출하면서 오라클 DB 연결 -->
		<!-- Spring Security 4에서는 메모리 내 인증을 사용하여 암호를 인코딩 즉 암호화 하지않고 일반 텍스트로 저장할 
		수 있었다. Spring Security 5부터는 비번을 인코딩 즉 암호화 해서 저장한다. 그러므로 There is no PasswordEncoder 
		mapped for the id “null” 오류가 발생하면 비번을 암호화 해서 처리하면 된다. -->
			
			<!--  <security:password-encoder ref="customPasswordEncoder"/>
			 빈아이디 customPasswordEncoder를 호출해서 비번 암호화 함 -->
			 
			 <security:password-encoder ref="bcryptPasswordEncoder" />
			 <!-- 빈 아이디  bcryptPasswordEncoder 호출해 비번 암호화 -->
			 
			  <security:jdbc-user-service data-source-ref="dataSource"
                                    users-by-username-query=
          "select userid,userpw,enabled from tbl_member where userid=?" 
                                    authorities-by-username-query=
          "select userid,auth from tbl_member_auth where userid=?"/>  <!-- 권한정보 검색-->
			
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
